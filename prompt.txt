Используя JavaScript или TypeScript + React нужно реализовать веб-приложение для произвольного управления личной коллекцией (книги, почтовые марки, монеты и т.д. — в тексте ниже они называются элементами). Так же нужен Bootstrap, и в качестве базы данных MySQL.

Неаутентифицированные пользователи имеют доступ только для чтения (они могут использовать поиск, но не могут создавать коллекции и элементы, не могут оставлять комментарии и отмечать лайки). Аутентифицированные не-администраторы имеют доступ ко всему, кроме страницы администратора. 

Страница администратора позволяет управлять пользователями — просматривать, блокировать, разблокировать, удалять, добавлять в администраторы, удалять из администраторов. АДМИН МОЖЕТ ОТКАЗАТЬСЯ ОТ АДМИНИСТРАТИВНОГО ДОСТУПА У СЕБЯ, это важно. 

Администратор видит все страницы как их автора (например, администратор может открыть коллекцию другого пользователя и добавить в нее элемент; таким образом, администратор фактически является владельцем каждой коллекции и каждого элемента). Управлять ими (редактировать, добавлять, удалять) может только администратор или создатель коллекций или элементов. Все доступно для просмотра всем (кроме страницы администратора).

Пользователи могут регистрироваться и проходить аутентификацию с помощью форм сайта.

Каждая страница (в верхнем заголовке) предоставляет доступ к полнотекстовому поиску. Результаты поиска всегда являются элементами (например, если текст найден в тексте комментария, результат поиска должен отображать ссылку на элемент с комментариями, а не на сам комментарий). Если результат является коллекцией, вы можете либо отобразить любой элемент, либо сгенерировать ссылку на коллекцию. 

У каждого пользователя есть своя личная страница, где он может управлять списком коллекций (создавать новые, удалять или редактировать) — каждая коллекция в списке является ссылкой на страницу коллекции, которая содержит таблицу элементов с сортировкой/фильтрацией и возможностями создания новых элементов, редактирования или удаления существующих элементов).

Каждая коллекция содержит: название, описание (с поддержкой форматирования markdown), тему/категорию (одно значение из предопределенного списка, например, «Книги», «Знаки», «Серебряные изделия» и, конечно же, «Другое» ), необязательное изображение (загружаемое пользователями в облако).

Также коллекция позволяет указывать настраиваемые поля, которые будет иметь каждый элемент в этой коллекции. Есть фиксированные поля «по умолчанию», «всегда включенные»: идентификатор, имя, теги. И пользователь может выбрать несколько из следующих на уровне коллекции: 3 целочисленных поля, 3 строковых поля, 3 многострочных текстовых поля, 3 логических флажка, 3 поля даты. Для всех выбранных настраиваемых полей пользователь указывает их название. Например, я хочу управлять коллекцией книг. Я могу выбрать (добавить к стандартному набору id+name+tags) дополнительное строковое поле «Автор», дополнительное текстовое поле «Аннотация», дополнительное поле данных «Год публикации». Все поля должны отображаться на странице элемента, а также некоторые из них должны отображаться на странице коллекции в списке элементов (не все, скажем, числа и однострочные строки). 

Все элементы имеют теги (пользователь может ввести несколько тегов; необходимо поддерживать автодополнение — когда пользователь начинает вводить текст, необходимо отобразить выпадающий список с тегами, начинающимися с введенной буквы, уже сохраненными в базе данных). 

Главная страница содержит:
- список последних добавленных элементов (название, коллекция, автор);
- список 5 крупнейших коллекций;
- облако тегов (когда пользователь нажимает на тег, вы отображаете список элементов — в общем случае для этого следует использовать «страницу результатов поиска»).



И так, теперь мне нужно перелопатить следующую часть кода:
<div className="container mt-5">
        <div className="d-flex justify-content-between align-items-center">
          <h2>{collections.title}</h2>
        </div>

        <ul className="list-group">

          <li key={collections.id} className="list-group-item p-0">

            <Link to={`/collections/${collections.id}`} style={{ textDecoration: 'none' }}>

              <div className="img_container">
                {collections.image_url && <img src={collections.image_url} alt={collections.title} />}
              </div>

              <div className="d-flex justify-content-between">
                
                <div>
                  <h4 className="cardHeader mt-1 ms-2 mb-0 pb-0" style={{ marginBottom: '0' }}>{collections.title}</h4>
                  <p className="itemsNum text-muted ms-2">
                    items in collection: {collections.itemCount}
                  </p>
                </div>

                <div className="d-flex me-1 align-items-center">
                  <button className="btn" style={{ border: 'none' }}>
                    <i className="bi bi-chat fs-2 text-dark"></i>
                  </button>
                  <button className="btn justify-content-center align-items-center" onClick={() => toggleLike(collections.id)} style={{ border: 'none' }}>
                    <i className={`bi ${collections.isLiked ? 'bi-heart-fill text-danger' : 'bi-heart text-dark'} fs-2`}></i> 
                  </button>
                  <span className="ms-0"><p className="likeCounter mb-0 me-2">{collections.likesCount}</p></span>
                </div>
              
              </div>

            </Link>

          </li>

        </ul>
      

      </div>


Нужно учитывать, что теперь у меня будет гораздо больше данных, ведь в новом коде должны быть задействованы все данные имеющие отношение к конкретной коллекуции.
Что находится в collection:
const response = {            // мама
      ...collection.toJSON(),
      likesCount,
      isLiked,
      itemCount: collection.get('itemsCount'),
      category: collection.Category,
      items: collection.Items.map(item => ({
        id: item.id,
        name: item.name,
        tags: item.Tags
      })),
      comments: collection.Comments.map(comment => ({
        id: comment.id,
        text: comment.text,
        userId: comment.user_id
      }))
    };

    res.json(response);

Мне нужно, чтобы фотография отображалась в полном размере, и область для нее была увеличена вплоть до 800px. Это значит, что по горизонтали или по вертикали, или и так и так если изображение квадратное, картинка должна быть 800px. Справа от нее должны быть элементы коллекции. Списком друг за другом. элемент коллекции включает в себя название в верхней части своего контейнера, и все до единого теги в нижней части. Если все теги не поместятся на одной строке, пусть будет две строки и тд. Если контейнер одного тега получится по высоте больше другого, ничего страшного. Под фотографией, то есть на левой стороне, должны быть видны лайки так, как они настроены в текущей версии, следом количество предметов в одном ряду с лайками. Под рядом лайков с количеством элементов коллекции, то есть так же на левой стороне должно быть описание коллекции. Под описанием и элементами коллекции дожны быть комментарии, с полем для набора нового комментария(фукционал пока не реализован).
И конечно, над всем этим должно быть название коллекции в текущем шрифте или может даже больше, а следом за ним категория этой коллекции в шрифте поменьше и не bold.