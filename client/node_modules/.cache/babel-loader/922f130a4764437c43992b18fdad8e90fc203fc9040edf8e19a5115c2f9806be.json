{"ast":null,"code":"var _jsxFileName = \"E:\\\\itransition_course\\\\course_project\\\\client\\\\src\\\\components\\\\TagsInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = process.env.REACT_APP_API_URL;\nconst fetchTags = async () => {\n  const response = await fetch(`${apiUrl}/api/collections/tags`);\n  const data = await response.json();\n  return data;\n};\nconst TagInput = ({\n  tags,\n  setTags\n}) => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [value, setValue] = useState('');\n  useEffect(() => {\n    // Загрузка существующих тегов\n    fetchTags().then(tags => {\n      setSuggestions(tags);\n    });\n    console.log('tags: ', tags);\n  }, []);\n  const onChange = (event, {\n    newValue\n  }) => {\n    setValue(newValue);\n  };\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    setSuggestions(suggestions.filter(tag => tag.toLowerCase().slice(0, inputLength) === inputValue));\n  };\n  const onSuggestionSelected = (event, {\n    suggestionValue\n  }) => {\n    setTags([...tags, suggestionValue]);\n    setValue('');\n  };\n  const getSuggestionValue = suggestion => suggestion;\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n  const inputProps = {\n    placeholder: 'Type a tag',\n    value,\n    onChange\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: () => setSuggestions([]),\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      onSuggestionSelected: onSuggestionSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"badge bg-secondary me-2\",\n        children: tag\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TagInput, \"HzfdsFp392eKOSiW+eYz+bj4aas=\");\n_c = TagInput;\nexport default TagInput;\nvar _c;\n$RefreshReg$(_c, \"TagInput\");","map":{"version":3,"names":["React","useState","useEffect","Autosuggest","jsxDEV","_jsxDEV","apiUrl","process","env","REACT_APP_API_URL","fetchTags","response","fetch","data","json","TagInput","tags","setTags","_s","suggestions","setSuggestions","value","setValue","then","console","log","onChange","event","newValue","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","length","filter","tag","slice","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","renderSuggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","inputProps","placeholder","onSuggestionsClearRequested","map","index","className","_c","$RefreshReg$"],"sources":["E:/itransition_course/course_project/client/src/components/TagsInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\nconst fetchTags = async () => {\r\n  \r\n  const response = await fetch(`${apiUrl}/api/collections/tags`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst TagInput = ({ tags, setTags }) => {\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Загрузка существующих тегов\r\n    fetchTags().then((tags) => {\r\n      setSuggestions(tags);\r\n\r\n    });\r\n    console.log('tags: ', tags);\r\n  }, []);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    setSuggestions(suggestions.filter(tag =>\r\n      tag.toLowerCase().slice(0, inputLength) === inputValue\r\n    ));\r\n  };\r\n\r\n  const onSuggestionSelected = (event, { suggestionValue }) => {\r\n    setTags([...tags, suggestionValue]);\r\n    setValue('');\r\n  };\r\n\r\n  const getSuggestionValue = (suggestion) => suggestion;\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <div>{suggestion}</div>\r\n  );\r\n\r\n  const inputProps = {\r\n    placeholder: 'Type a tag',\r\n    value,\r\n    onChange,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={() => setSuggestions([])}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n        onSuggestionSelected={onSuggestionSelected}\r\n      />\r\n      <div>\r\n        {tags.map((tag, index) => (\r\n          <span key={index} className=\"badge bg-secondary me-2\">\r\n            {tag}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}