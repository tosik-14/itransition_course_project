{"ast":null,"code":"var _jsxFileName = \"E:\\\\itransition_course\\\\course_project\\\\client\\\\src\\\\components\\\\TagsInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = process.env.REACT_APP_API_URL;\n\n// Генератор уникальных идентификаторов\nconst generateId = () => Date.now() + Math.random();\nconst fetchTags = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/collections/tags`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching tags:', error);\n    return [];\n  }\n};\nconst TagsInput = ({\n  tags,\n  setTags\n}) => {\n  _s();\n  const [allSuggestions, setAllSuggestions] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [value, setValue] = useState('');\n  useEffect(() => {\n    fetchTags().then(tags => {\n      setAllSuggestions(tags.map(tag => ({\n        id: tag.id,\n        name: tag.name\n      })));\n      setSuggestions(tags.map(tag => ({\n        id: tag.id,\n        name: tag.name\n      })));\n      //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\n    });\n  }, []);\n  const onChange = (event, {\n    newValue\n  }) => {\n    setValue(newValue);\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\n  };\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    const filteredSuggestions = allSuggestions.filter(tag => tag.name.toLowerCase().slice(0, inputLength) === inputValue);\n    setSuggestions(filteredSuggestions);\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\n  };\n  const onSuggestionSelected = (event, {\n    suggestion\n  }) => {\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\n    if (!tags.some(tag => tag.id === suggestion.id)) {\n      setTags([...tags, suggestion]);\n    }\n    setValue('');\n  };\n  const addCustomTag = () => {\n    const trimmedValue = value.trim();\n    if (trimmedValue && !tags.some(tag => tag.name === trimmedValue)) {\n      setTags([...tags, {\n        id: generateId(),\n        name: trimmedValue\n      }]);\n      setValue('');\n    }\n  };\n  const getSuggestionValue = suggestion => suggestion.name;\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n  const inputProps = {\n    placeholder: 'Type a tag',\n    value,\n    onChange,\n    onKeyDown: event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        addCustomTag();\n      }\n    },\n    className: 'form-control' // Add Bootstrap classes for input styling\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: () => setSuggestions(allSuggestions),\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        onSuggestionSelected: onSuggestionSelected,\n        theme: {\n          container: 'd-flex flex-grow-1',\n          input: 'form-control me-2',\n          suggestionsList: 'list-group',\n          suggestion: 'list-group-item'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary me-2\",\n        onClick: addCustomTag,\n        children: \"Add Custom Tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2\",\n      children: tags.map(tag => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"badge bg-secondary me-2 mb-1\",\n        children: tag.name\n      }, tag.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(TagsInput, \"fTQGiGw1Oy9oxYryxI9nvDOSZyY=\");\n_c = TagsInput;\nexport default TagsInput;\n\n/*import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\nconst fetchTags = async () => {\r\n  try {\r\n    const response = await fetch(`${apiUrl}/api/collections/tags`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching tags:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst TagsInput = ({ tags, setTags }) => {\r\n  const [allSuggestions, setAllSuggestions] = useState([]);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [value, setValue] = useState('');\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchTags().then((tags) => {\r\n      setAllSuggestions(tags);\r\n      setSuggestions(tags);\r\n      console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    });\r\n  }, []);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    const filteredSuggestions = allSuggestions.filter(tag =>\r\n      tag.name.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n\r\n    setSuggestions(filteredSuggestions);\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionSelected = (event, { suggestion }) => {\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    if (!tags.includes(suggestion.name)) {\r\n      setTags([...tags, suggestion.name]);\r\n      console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    }\r\n    setValue('');\r\n  };\r\n\r\n  const addCustomTag = () => {\r\n    const trimmedValue = value.trim();\r\n    if (trimmedValue && !tags.includes(trimmedValue)) {\r\n      setTags([...tags, trimmedValue]);\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <div>{suggestion.name}</div>\r\n  );\r\n\r\n  const inputProps = {\r\n    placeholder: 'Type a tag',\r\n    value,\r\n    onChange,\r\n    onKeyDown: (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault();\r\n        addCustomTag();\r\n      }\r\n    },\r\n    className: 'form-control me-2'\r\n  };\r\n\r\n  return (\r\n    <div className=\"me-2\">\r\n      <div  className=\"d-flex\">\r\n        <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={() => setSuggestions(allSuggestions)}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n        onSuggestionSelected={onSuggestionSelected}\r\n      />\r\n      <button className=\"btn btn-primary\" onClick={addCustomTag}>\r\n        Add Custom Tag\r\n      </button>\r\n      </div>\r\n      \r\n      <div className=\"mt-2\">\r\n        {tags.map((tag, index) => (\r\n          <span key={index} className=\"badge bg-secondary me-2 mb-1\">\r\n            {tag}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagsInput;\r\n\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"TagsInput\");","map":{"version":3,"names":["React","useState","useEffect","Autosuggest","jsxDEV","_jsxDEV","apiUrl","process","env","REACT_APP_API_URL","generateId","Date","now","Math","random","fetchTags","response","fetch","ok","Error","data","json","error","console","TagsInput","tags","setTags","_s","allSuggestions","setAllSuggestions","suggestions","setSuggestions","value","setValue","then","map","tag","id","name","onChange","event","newValue","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","length","filteredSuggestions","filter","slice","onSuggestionSelected","suggestion","log","some","addCustomTag","trimmedValue","getSuggestionValue","renderSuggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","inputProps","placeholder","onKeyDown","key","preventDefault","className","onSuggestionsClearRequested","theme","container","input","suggestionsList","onClick","_c","$RefreshReg$"],"sources":["E:/itransition_course/course_project/client/src/components/TagsInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\n// Генератор уникальных идентификаторов\r\nconst generateId = () => Date.now() + Math.random();\r\n\r\nconst fetchTags = async () => {\r\n  try {\r\n    const response = await fetch(`${apiUrl}/api/collections/tags`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching tags:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst TagsInput = ({ tags, setTags }) => {\r\n  const [allSuggestions, setAllSuggestions] = useState([]);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchTags().then((tags) => {\r\n      setAllSuggestions(tags.map(tag => ({ id: tag.id, name: tag.name })));\r\n      setSuggestions(tags.map(tag => ({ id: tag.id, name: tag.name })));\r\n      //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    });\r\n  }, []);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    const filteredSuggestions = allSuggestions.filter(tag =>\r\n      tag.name.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n\r\n    setSuggestions(filteredSuggestions);\r\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionSelected = (event, { suggestion }) => {\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    if (!tags.some(tag => tag.id === suggestion.id)) {\r\n      setTags([...tags, suggestion]);\r\n    }\r\n    setValue('');\r\n  };\r\n\r\n  const addCustomTag = () => {\r\n    const trimmedValue = value.trim();\r\n    if (trimmedValue && !tags.some(tag => tag.name === trimmedValue)) {\r\n      setTags([...tags, { id: generateId(), name: trimmedValue }]);\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <div>{suggestion.name}</div>\r\n  );\r\n\r\n  const inputProps = {\r\n    placeholder: 'Type a tag',\r\n    value,\r\n    onChange,\r\n    onKeyDown: (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault();\r\n        addCustomTag();\r\n      }\r\n    },\r\n    className: 'form-control'  // Add Bootstrap classes for input styling\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex align-items-center\">\r\n        <Autosuggest\r\n          suggestions={suggestions}\r\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={() => setSuggestions(allSuggestions)}\r\n          getSuggestionValue={getSuggestionValue}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={inputProps}\r\n          onSuggestionSelected={onSuggestionSelected}\r\n          theme={{\r\n            container: 'd-flex flex-grow-1',\r\n            input: 'form-control me-2',\r\n            suggestionsList: 'list-group',\r\n            suggestion: 'list-group-item',\r\n          }}\r\n        />\r\n        <button \r\n          className=\"btn btn-primary me-2\"\r\n          onClick={addCustomTag}\r\n        >\r\n          Add Custom Tag\r\n        </button>\r\n      </div>\r\n      <div className=\"mt-2\">\r\n        {tags.map((tag) => (\r\n          <span key={tag.id} className=\"badge bg-secondary me-2 mb-1\">\r\n            {tag.name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagsInput;\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\nconst fetchTags = async () => {\r\n  try {\r\n    const response = await fetch(`${apiUrl}/api/collections/tags`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching tags:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst TagsInput = ({ tags, setTags }) => {\r\n  const [allSuggestions, setAllSuggestions] = useState([]);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [value, setValue] = useState('');\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchTags().then((tags) => {\r\n      setAllSuggestions(tags);\r\n      setSuggestions(tags);\r\n      console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    });\r\n  }, []);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n    //console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    const filteredSuggestions = allSuggestions.filter(tag =>\r\n      tag.name.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n\r\n    setSuggestions(filteredSuggestions);\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n  };\r\n\r\n  const onSuggestionSelected = (event, { suggestion }) => {\r\n    console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    if (!tags.includes(suggestion.name)) {\r\n      setTags([...tags, suggestion.name]);\r\n      console.log('onSuggestionsFetchRequested 1 tags:', tags, allSuggestions, suggestions);\r\n    }\r\n    setValue('');\r\n  };\r\n\r\n  const addCustomTag = () => {\r\n    const trimmedValue = value.trim();\r\n    if (trimmedValue && !tags.includes(trimmedValue)) {\r\n      setTags([...tags, trimmedValue]);\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <div>{suggestion.name}</div>\r\n  );\r\n\r\n  const inputProps = {\r\n    placeholder: 'Type a tag',\r\n    value,\r\n    onChange,\r\n    onKeyDown: (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault();\r\n        addCustomTag();\r\n      }\r\n    },\r\n    className: 'form-control me-2'\r\n  };\r\n\r\n  return (\r\n    <div className=\"me-2\">\r\n      <div  className=\"d-flex\">\r\n        <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={() => setSuggestions(allSuggestions)}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n        onSuggestionSelected={onSuggestionSelected}\r\n      />\r\n      <button className=\"btn btn-primary\" onClick={addCustomTag}>\r\n        Add Custom Tag\r\n      </button>\r\n      </div>\r\n      \r\n      <div className=\"mt-2\">\r\n        {tags.map((tag, index) => (\r\n          <span key={index} className=\"badge bg-secondary me-2 mb-1\">\r\n            {tag}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagsInput;\r\n\r\n\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}